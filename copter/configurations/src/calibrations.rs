use std::default::Default;
use std::fs::{File, OpenOptions};
use toml;
use std::io::prelude::*;
use std::string::String;

#[derive(Debug, Deserialize, Serialize)]
pub struct Simple {
    x: f32,
    y: f32,
    z: f32,
}

#[derive(Debug, Deserialize, Serialize)]
pub struct Spacial {
    xx: f32,
    xy: f32,
    xz: f32,
    yx: f32,
    yy: f32,
    yz: f32,
    zx: f32,
    zy: f32,
    zz: f32,
}

#[derive(Debug, Deserialize, Serialize)]
pub struct Calibrations {
    gyroscope: Option<Simple>,
    accelerometer: Option<Spacial>,
    magnetometer: Option<Spacial>,
}

impl Calibrations {
    pub fn new() -> Result<Calibrations, String> {
        let mut calibration_file: File = match OpenOptions::new()
            .create(true)
            .open("configuration/calibrations.toml")
        {
            Ok(file) => file,
            Err(e) => return Err(e.to_string()),
        };

        let mut calibration_string = String::new();
        match calibration_file.read_to_string(&mut calibration_string) {
            Ok(_size) => {}
            Err(e) => return Err(e.to_string()),
        };

        match toml::from_str(calibration_string.as_ref()) {
            Ok(calib) => Ok(calib),
            Err(e) => Err(e.to_string()),
        }
    }

    pub fn save(&self) -> Result<(), String> {
        let mut calibration_file: File = match OpenOptions::new()
            .create(true)
            .write(true)
            .open("configuration/calibrations.toml")
        {
            Ok(file) => file,
            Err(e) => return Err(e.to_string()),
        };

        let calibration_string: String = format!(
            "# This file is automatically generated. Do not edit!\n\n{}",
            toml::to_string(self).unwrap()
        );

        calibration_file
            .write_all(calibration_string.as_bytes())
            .unwrap();
        Ok(())
    }
}

impl Default for Calibrations {
    fn default() -> Calibrations {
        Calibrations {
            gyroscope: Some(Simple {
                x: 0.0,
                y: 0.0,
                z: 0.0,
            }),
            accelerometer: Some(Spacial {
                xx: 0.0,
                xy: 0.0,
                xz: 0.0,
                yx: 0.0,
                yy: 0.0,
                yz: 0.0,
                zx: 0.0,
                zy: 0.0,
                zz: 0.0,
            }),
            magnetometer: Some(Spacial {
                xx: 0.0,
                xy: 0.0,
                xz: 0.0,
                yx: 0.0,
                yy: 0.0,
                yz: 0.0,
                zx: 0.0,
                zy: 0.0,
                zz: 0.0,
            }),
        }
    }
}
